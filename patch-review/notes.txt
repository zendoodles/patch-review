Code Reviews: Move projects forward without pissing people off
Code Reviews: doing little ones to doing big ones without losing your mind or your friends
Strategies for code reviews that improve the quality of future proposed solutions
Code Review for Quality: applicable in organizations, contrib, and core
Code Review: All the cool kids are doin’ it!

In this session, we'll look at the process of patch review from start to finish, discussing strategies to maximize learning opportunities, touching on why some patches are harder to review than others, and helping attendees gain confidence in promoting issues from “Needs Review” to "RTBC" (or providing appropriate feedback on code not yet ready for consumption).

Each patch represents a personal investment by the developer. It takes time to consider a problem, craft a solution, roll the patch, and upload it to an issue queue. All too often, some of these patches slip through the cracks and go unreviewed for months or even years.

Even though it may fix bugs, improve the UI, or add better documentation, each patch must be thoroughly reviewed before it can be committed. An imperfect patch, which may not be ready to commit yet, still represents an opportunity to educate contributors about coding style, core gates, and/or the process itself.

This session is intended for developers, module maintainers, and project managers with a programming background who want to learn to write reviews for patches, new project applications, or custom code internal to their organization.


From Sydney
In this session, we'll look at the process of patch review from start to finish, discussing strategies to maximize learning opportunities, touching on why some patches are harder to review than others, and helping attendees gain confidence in promoting issues from “Needs Review” to "RTBC" (or providing appropriate feedback on patches not yet ready for consumption).
Each patch represents a personal investment by the developer. It takes time to consider a problem, craft a solution, roll the patch, and upload it to an issue queue. All too often, some of these patches slip through the cracks and go unreviewed for months or even years.
Even though it may fix bugs, improve the UI, or add better documentation, each patch must be thoroughly reviewed before it can be commited. An imperfect patch, which may not be ready to commit yet, still represents an opportunity to educate contributors about coding style, core gates, and/or the process itself.
This session is intended for developers, module maintainers, and project managers with a programming background who want to learn to write reviews for patches, new project applications, and/or custom code.
Portland
In this session, we'll look at the process of patch review from start to finish, discussing strategies to maximize learning opportunities, touching on why some patches are harder to review than others, and helping attendees gain confidence in promoting issues from “Needs Review” to "RTBC" (or providing appropriate feedback on patches not yet ready for consumption).
Each patch represents a personal investment by the developer. It takes time to consider a problem, craft a solution, roll the patch, and upload it to an issue queue. All too often, some of these patches slip through the cracks and go unreviewed for months or even years.
Even though it may fix bugs, improve the UI, or add better documentation, each patch must be thoroughly reviewed before it can be commited. An imperfect patch, which may not be ready to commit yet, still represents an opportunity to educate contributors about coding style, core gates, and/or the process itself.
This session is intended for developers, module maintainers, and project managers with a programming background who want to learn to write reviews for patches, new project applications, and/or custom code.


